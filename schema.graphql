type Farm @entity {
  id: Bytes! # address
  totalStaked: BigInt! # uint256
  totalRewardsPaid: BigInt! # uint256
  depositors: [Depositor!]! @derivedFrom(field: "farm")
  deposits: [Deposit!]! @derivedFrom(field: "farm")
  withdrawals: [Withdrawn!]! @derivedFrom(field: "farm")
  rewards: [RewardPaid!]! @derivedFrom(field: "farm")
  tvl: [TVL!]! @derivedFrom(field: "farm")
}

type Depositor @entity {
  id: String! # address (farmid-useraddress)
  user: Bytes! # address of depositor
  farm: Farm! # address of the staked farm
  amount: BigInt! # uint256
}

type RewardPaid @entity(immutable: true) {
  id: Bytes!
  farm: Farm! # address of the farm
  user: Bytes! # address of the reward recipient
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Deposit @entity(immutable: true) {
  id: Bytes!
  farm: Farm! # address of the staked farm
  user: Bytes! # address of depositor
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Withdrawn @entity(immutable: true) {
  id: Bytes!
  farm: Farm! # address of the staked farm
  user: Bytes! # address of depositor
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}


type TVL @entity(immutable: true) {
  id: Bytes!
  farm: Farm! # address of the staked farm
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}